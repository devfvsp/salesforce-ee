/**
 * Shop System Plugins:
 * - Terms of Use can be found under:
 * https://github.com/wirecard/salesforce-ee/blob/master/_TERMS_OF_USE
 * - License can be found under:
 * https://github.com/wirecard/salesforce-ee/blob/master/LICENSE
 */
/**
 * Script includes
 */
var HTTPBaseService = require('./HTTPBaseService');

var TestHttpCredentialsService = HTTPBaseService.extend({
    init: function (httpUser, httpPassword, baseUrl) {
        // call parent init method to set service name
        var serviceName = 'wirecard.paymentgateway';
        this._super(serviceName);

        // set authentication method
        this.authentication = 'BASIC';

        // request header
        var authorizationHash = this.getAuthorizationHash(httpUser, httpPassword);
        this.requestHeaders = {
            'Content-type': 'application/json',
            'Authorization': 'Basic ' + authorizationHash
        };
        this.requestMethod = 'GET';

        // set service endpoint
        this.relativeURLPath = 'engine/rest/merchants';

        // set baseUrl
        this.baseUrl = baseUrl;
    },

    /**
     * Prepare the request i.e. create request body as json
     * @param {dw.svc.HTTPService}    svc       The service itself
     * @param {dw.util.Map}           params    Map of key value pairs that have to be added as parameters to the call
     * @return String The string that has to be sent to the service
     */
    createRequest: function (svc, params) {
        //sets the service call endpoint
        var url = this.baseUrl || svc.URL;
        svc.URL = [ url.replace(/\/$/, ''), this.relativeURLPath ].join('/');

        //adding header values
        if ( !empty(this.requestHeaders) ) {
            for ( var headerID : String in this.requestHeaders ) {
                svc.addHeader(headerID, this.requestHeaders[headerID]);
            }
        }

        //setting the authentication mechanism
        svc.setAuthentication(this.authentication);

        //setting request method
        svc.setRequestMethod(this.requestMethod);
        return params;
    },

    /**
     * Retrieves the auth header hash.
     * @param {String} userName
     * @param {String} password
     * @returns {String}
     */
    getAuthorizationHash: function(userName, password) {
        var Encoding = require('dw/crypto/Encoding');
        var Bytes = require('dw/util/Bytes');
        var bytes = new Bytes(userName + ':' + password, this.encoding);
        return Encoding.toBase64(bytes);
    }
});

//Export the service
module.exports = function (userName, password, baseUrl) {
    return (new TestHttpCredentialsService(userName, password, baseUrl)).getService();
};
